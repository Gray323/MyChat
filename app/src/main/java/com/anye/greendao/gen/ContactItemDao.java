package com.anye.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rxd.mychat.db.ContactItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT_ITEM".
*/
public class ContactItemDao extends AbstractDao<ContactItem, Long> {

    public static final String TABLENAME = "CONTACT_ITEM";

    /**
     * Properties of entity ContactItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CurrentAccount = new Property(1, String.class, "currentAccount", false, "current_account");
        public final static Property Avatar = new Property(2, String.class, "avatar", false, "contact_avatar");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "contact_nickname");
        public final static Property Account = new Property(4, String.class, "account", false, "contact_account");
        public final static Property Gender = new Property(5, String.class, "gender", false, "contact_gender");
        public final static Property Email = new Property(6, String.class, "email", false, "contact_email");
        public final static Property Reg = new Property(7, String.class, "reg", false, "contact_reg");
        public final static Property Signature = new Property(8, String.class, "signature", false, "contact_signature");
    }


    public ContactItemDao(DaoConfig config) {
        super(config);
    }
    
    public ContactItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"current_account\" TEXT," + // 1: currentAccount
                "\"contact_avatar\" TEXT," + // 2: avatar
                "\"contact_nickname\" TEXT," + // 3: nickname
                "\"contact_account\" TEXT," + // 4: account
                "\"contact_gender\" TEXT," + // 5: gender
                "\"contact_email\" TEXT," + // 6: email
                "\"contact_reg\" TEXT," + // 7: reg
                "\"contact_signature\" TEXT);"); // 8: signature
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String currentAccount = entity.getCurrentAccount();
        if (currentAccount != null) {
            stmt.bindString(2, currentAccount);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(5, account);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String reg = entity.getReg();
        if (reg != null) {
            stmt.bindString(8, reg);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(9, signature);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String currentAccount = entity.getCurrentAccount();
        if (currentAccount != null) {
            stmt.bindString(2, currentAccount);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(5, account);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String reg = entity.getReg();
        if (reg != null) {
            stmt.bindString(8, reg);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(9, signature);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ContactItem readEntity(Cursor cursor, int offset) {
        ContactItem entity = new ContactItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // currentAccount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avatar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // account
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // reg
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // signature
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContactItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCurrentAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAccount(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSignature(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ContactItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ContactItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ContactItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
