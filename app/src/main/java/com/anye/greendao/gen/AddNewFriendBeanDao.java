package com.anye.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rxd.mychat.db.AddNewFriendBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADD_NEW_FRIEND_BEAN".
*/
public class AddNewFriendBeanDao extends AbstractDao<AddNewFriendBean, Long> {

    public static final String TABLENAME = "ADD_NEW_FRIEND_BEAN";

    /**
     * Properties of entity AddNewFriendBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Currentname = new Property(1, String.class, "currentname", false, "currentname");
        public final static Property MyName = new Property(2, String.class, "myName", false, "fromname");
        public final static Property FromAvatar = new Property(3, String.class, "fromAvatar", false, "fromavatar");
        public final static Property Username = new Property(4, String.class, "username", false, "torname");
        public final static Property ToAvatar = new Property(5, String.class, "toAvatar", false, "toavatar");
        public final static Property State = new Property(6, int.class, "state", false, "state");
    }


    public AddNewFriendBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AddNewFriendBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADD_NEW_FRIEND_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"currentname\" TEXT," + // 1: currentname
                "\"fromname\" TEXT," + // 2: myName
                "\"fromavatar\" TEXT," + // 3: fromAvatar
                "\"torname\" TEXT," + // 4: username
                "\"toavatar\" TEXT," + // 5: toAvatar
                "\"state\" INTEGER NOT NULL );"); // 6: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADD_NEW_FRIEND_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AddNewFriendBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String currentname = entity.getCurrentname();
        if (currentname != null) {
            stmt.bindString(2, currentname);
        }
 
        String myName = entity.getMyName();
        if (myName != null) {
            stmt.bindString(3, myName);
        }
 
        String fromAvatar = entity.getFromAvatar();
        if (fromAvatar != null) {
            stmt.bindString(4, fromAvatar);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(5, username);
        }
 
        String toAvatar = entity.getToAvatar();
        if (toAvatar != null) {
            stmt.bindString(6, toAvatar);
        }
        stmt.bindLong(7, entity.getState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AddNewFriendBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String currentname = entity.getCurrentname();
        if (currentname != null) {
            stmt.bindString(2, currentname);
        }
 
        String myName = entity.getMyName();
        if (myName != null) {
            stmt.bindString(3, myName);
        }
 
        String fromAvatar = entity.getFromAvatar();
        if (fromAvatar != null) {
            stmt.bindString(4, fromAvatar);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(5, username);
        }
 
        String toAvatar = entity.getToAvatar();
        if (toAvatar != null) {
            stmt.bindString(6, toAvatar);
        }
        stmt.bindLong(7, entity.getState());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AddNewFriendBean readEntity(Cursor cursor, int offset) {
        AddNewFriendBean entity = new AddNewFriendBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // currentname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // myName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fromAvatar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // username
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // toAvatar
            cursor.getInt(offset + 6) // state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AddNewFriendBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCurrentname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMyName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFromAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUsername(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setToAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setState(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AddNewFriendBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AddNewFriendBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AddNewFriendBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
